# -*- coding: utf-8 -*-
"""2024-UNAB-PA.Clase4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xgGYU9M0aY2Scibcm1WsQ9TuTK63kuIZ

# UNAB - Programación Avanzada - Cursada 2024
---

## Clase 4. Metaclases y decoradores


Ejemplos extraidos desde la teoría:
"""

new_class = type('myClass',(object, ),{'a' : True})

a = new_class()
a.a

# Ejemplo de creación de una función decoradora sin argumentos

def my_primer_decorador(function):

   def funcion_de_retorno():
       print('Inicio...')
       function()
       print('Fin')

   return funcion_de_retorno

# Crear nuevo decorator donde la salida sea
# 20:56:10
# Proceso demora: 20 segundos
# 20:56:30


@my_primer_decorador
def funcion_de_entrada():
   print('Hola mundo')

@my_primer_decorador
def input_funcion():
   print('Hello world')


if __name__ == "__main__":
   funcion_de_entrada()
   print()
   input_funcion()

# Ejemplo de creación de una función decoradora CON argumentos

def calcular_area_triangulo(function):

   def funcion_de_retorno(*args, **kwargs):
       res = function(*args, **kwargs)
       return res / 2

   return funcion_de_retorno


@calcular_area_triangulo
def calcular_area(base, altura):
   return base * altura


if __name__ == "__main__":
   print(calcular_area(4, 10))

# Ejemplo de creación de una función decoradora CON argumentos (Fuente ChatGTP-3)

def mi_decorador(funcion):
    def funcion_envoltorio(*args, **kwargs):
        print("Antes de llamar a la función.")
        resultado = funcion(*args, **kwargs)
        print("Después de llamar a la función.")
        return resultado
    return funcion_envoltorio

@mi_decorador
def mi_funcion():
    print("Dentro de la función.")

mi_funcion()